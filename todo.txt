todo: more optimization
  done: Apply of clamda and cfunction can be subst by their body directly.
    # notice the side effects of argument and reference count.
  todo: more ananlysis for optimization(assign side effects analysys, 
    io side effects, state change sideeffects
  todo: type inference
  todo: partial evaluation
  todo: block/exit/continue become while/break/coninute + block label

todo: more builtin
  done: eval(done), callcc(done), callfc(coded, but not tested), 
  done: block(done), catch/throw(done), unwind-protect(done)
  done: findall
  todo: rules(done mostly)
    todo: cut
  todo: marco
  todo: module
  todo: parser builtin

done: assemble alpha convert, assign convert, optimizal transformation, 
      tail recursive, trampoline, generate code, solve/eval

todo: tail recursive

todo: trampoline
  # maybe don't need any more.

doing: compile to python 
  done: use python var as t var
  done：logic var become LogicVar, 
        but other var is compiled to python var with other values.

restart at 2012.10.10, but start committing at 2012.10.27
===========================================================
stop at near 2011.12.21(last commit to git)

todo: T language
  todo: grammar

todo profiling the dao

todo: garbage collect in memo of result.

todo: memo builtins' result
 # necessary:   sign(op), number(exp2) -> (may(char('+')), number) | (char('-'), number)

todo: first set for matcher  compute when create command, not when calling command, without using solver.env
  done 2011-11-2: first set for matcher

todo: succeed continution, fail continuation and compiler
  # fail continuation may be not needed when compile to python

todo: no list, tuples, only Cons
todo: module become object? object oriented with module.
  # lookup var in base module, base module becomes super class.

todo:  replace environment with active record

todo: explore the possibility of lazy evaluation
  # 2011-11-12: I find a expression is saved in env for a var when debugging.

todo: select next choice on the history and recent choice 

todo: more special forms, builtins.
  todo: for/start/end/step

todo: natural language programming
  overlook superfluous words 

todo: chinese programming
  filter, decoration word, superfluous words

================================================================================================================

done 2011-08-23 11:02:28： better use module
done 2011-11-10: quasiquote and backquote

done 2011-11-10: manage builtin with module
done 2011-11-9: correctly arrange and search env, global env，builtin env
done: more builtins
  cancel: serialized assign
  done 2011-11-6:  global var assign, outer assign, local assign
  done 2011-11-6: define global var, outer var
  done 2011-11-6: recursive define    
  done 2011-11-6: get the value of global var, outer var
  done 2011-10  : each(for/each), if-elsif-else, case/of, until, where, when, loop, do, 

done 2011-11-5: user macro rethink
  # true lisp macro: expand and eval in eval the macro.
done 2011-11-4: left recursive
done 2011-11-2: first set for matcher 
done 2011-10-31: rule signature, for better efficieny in calling function.
done: meta syntax in python.
  done: dinpy is born.
