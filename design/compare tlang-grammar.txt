statement:
  * expression statement
  * let
  let recursive
  where
  * case
  * loop
    * infinite loop
    * loop times
    * loop until
    * loop while
    for in loop
    for from to loop
  fun
  macro
  * block
  label 
  * pass
  * break # break label with 5; break 2 levels with 5; break 2 levels loop/times; break; break with 5
  return # return 5
  * redo # redo label; redo 2 levels; redo 2 levels loop/times
  * if-elif-else
  * compound statement {} 
  * module use statement
    in
    use
  * exception
    catch/throw
    try/except/finally
    protect/finally

  function and macro:
    define:
      fun a (): statements.
      
      
    redefine
    append definition
    insert definition
    remove definition
    
expression: 
  * atom
    * identifier
    * number
    * string
      " ..."
      """ ..."""
  comma separated
  unary
    operator: ++, --
      + - ++, -- ! *(kleene star, surfix), +(one more, surfix)
  * binary: + *, <, <=, ==
    operator:  
  ternary
  * assign
  ()

  list [...]
  tuple #[]
  dictionary #{}
  function call
  attribute access
  [] index  
  string template:  %()s, %()r, %()d, %name, %()/s, %a/b, %a/b, %a/n

  quasiquote, unquote, unquote splice: ` , ,@

comment

dynamic syntax
  syntax

== samples ==============================================================

x = function() [ // + any(char(_))+eol] #到行尾
                     [ /. + any(char_)) + ./] # embeddable
 

while 1:
    while 1:
        while 1:
            print 1

while 1:
   while 1:
       while 1: print
   print 1
   print 2

loop:
    print 'hello'
by 3 times

loop:
    print 'hello'
until x=3

loop loop { print 3; print 3}
operator and expression
++a, --a -(++a) +(++a)
a += 3
3(5+4) 3x+4y

合一: a :=: b;
不能合一: a :\:

谓词: 加感叹号，只是个习惯而已
a=!b, a>!b

赋值
------
a = 1;   
a, b = list1
a, b = 1, 2
a = b = 1 #串连赋值
a, b := a+b, a+b # 串行赋值

分支
if a>1 then print 1
if a>1 then print 1
if a>1 then print 1; else print 2

if a>1 then if a>2 then if a>3 then print 1
                               else print 1
                   else print 1
       else print 1

if a>1 
then if a>2 then if a>3 then print 1
                        else print 1
            else print 1
else print 1

if a>1: 
    if a>2: 
        if a>3: print 1
        else: print 1
    else: print 1
else:  print 1

if a>1 then print 1
else print 2

if a>1 then print 1
elsif a>2: print 2
else print 3

if a>1: print 1
elif a>2: print 2
else print 3

if a>1: print 1; else [ if a>2 print 2; else print 3 ]

情况
case x:
  1: print 1
  2: print 2
  3: print 3

case x:
  1; 2: print 1
  3; 4: print 2
  else: print 3

case x, y:
  1,2: print 1
  3,4: print 2
  5,6;7,8: print 3
case x of 1: print 1;   of 2: print 2;   else: print 3

块
block a: { print 1; print 2; { if i>1 then break a }; print 3} 

循环
--------
loop print x 
loop print y

loop: 
  print x

loop print x by 3 times

loop 
  x = 1; loop print x; x++ until x=5

loop print x; x++ while x<5

while x=5, y=6 and z=7 loop print x until x<5
while x=5, y=6 or z=7: print x

unless x=5: print x

block: { loop: [print 1; exit a with 1] } 
block a: {print 1}

loop: loop: { print a; exit 2 layer with 1 } by 3 times

loop: [ loop: print 1 until 1; exit ] 
loop: { [ loop: print 1 until 1 ] exit }

for i=0 till i<5 by i++: 
{ print i; next for }


for i=0 till i<5 by i++: 
  print i
  redo for

for i from 10 down to 0: print i
for i from 10 down to 0 by 2: print i
for i from 0 to 10 by 2: print i
 
异常：

try: print a; except: print b; finally: print c

catch a: print 1; throw: a with 1

try: print a; always: print 1

pytry: print; except Error, e: print; finally: print c

函数, 宏

let, let recur
where, where recur // do not have it. not necessary. 

let a=1, b=2 do print a 
let a=1; b=2 do print a

let recur a=1, b=2 do print a

do print a  where recur a=1, b=2

memo@ : memo the result after excute command. 

fun a(): print 1. (x): print 2. // replace matched definition

fun a = (): print 1.  // replace whole definition

fun a + (): print a.  // append after

fun a % (): print a. // insert before

fun b(x y): print 2

fun b (x, y): print 2
  (i): print 1
  (1,2): print 3

fun b(x, y): print 2
        (i): print 2
        (): print 3     

fun (x): print 1; print 2
    (x, y): print 1

// remove definitions

fun - a, b, c

fun - a/3, b/2, c/f(1)

fun - a(x, y)(x),  b(x,y), c/2, d 

macro: same grammar with function.

回引号
----------
'f(x)

`f(,x)

`f(,@x)

导入
-------------

use a

use a.b

use a/b

use a/b/c

use a/*

use a/*b

use a/b*

use a/b*e

use a.(b as x, c as y)
use a/(b, c)

use a/* if test(*)

动态语法
--------

write(x):
  'write'; expression(x); print x

statement(x):! write(x)

binary(x, add):! operator('-', add,  precedence(grammar.operator.add))


fun a (): print f(); print 2; fun a(): print 2; (x): pass; fun (): return 1

fun a (): print; (): print 1; (): print 3

loop { print a; loop print b }

while 1 { print a; while 2 print b}

{/dhfjhdf: dsjfh}
[/dsfhjk, dsfh, dsfhh, dsfhj]
(/12,3)

(/1)+(/2)+(/3)

[print a, print b, print c]

//
//gfgfhgf
/..................................................
................./......../.................../

print //
